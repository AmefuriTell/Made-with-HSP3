#module _othello_
    //関数定義
        #deffunc ClearField array field
            i = 0
            repeat 10
                j = 0
                repeat 10
                    field.i.j = 0
                    j++
                loop
                i++
            loop
            field.4.4 = 1
            field.5.5 = 1
            field.4.5 = -1
            field.5.4 = -1
            i = 0
            repeat 10
                field.i.0 = 10
                field.i.9 = 10
                field.0.i = 10
                field.9.i = 10
                i++
            loop
        return
        #deffunc DrawField array field//描画
            redraw 0
                i = 1
                repeat 8
                    j = 1
                    repeat 8
                        pos (i - 1) * 100, (j - 1) * 100
                        if(field.i.j == 0){
                            celput 1,, 1.0, 1.0
                        }else:if(field.i.j == 1){
                            celput 2,, 1.0, 1.0
                        }else:if(field.i.j == -1){
                            celput 3,, 1.0, 1.0
                        }else:if(field.i.j == 2 || field.i.j == -2){
                            celput 4,, 1.0, 1.0
                        }
                        j++
                    loop
                    i++
                loop
            redraw 1
        return
        #defcfunc CheckCanPut array field, var turn
            //各マスについてみる
            dim dx, 8 : dx = 0, 1, 1, 1, 0, -1, -1, -1
            dim dy, 8 : dy = -1, -1, 0, 1, 1, 1, 0, -1
            count_can_put = 0
            checkx = 1
            repeat 8
                checky = 1
                repeat 8
                    if(field.checkx.checky == 0 || field.checkx.checky == 2){
                        i = 0
                        repeat 8
                            if(field(checkx + dx.i, checky + dy.i) == -turn){
                                j = 1
                                repeat
                                    switch field(checkx + dx(i) * j, checky + dy(i) * j)
                                        case turn
                                            field(checkx, checky) = 2
                                            count_can_put++;
                                        case 0
                                        case 10
                                        case 2
                                            break
                                        swbreak
                                    swend
                                    j++
                                loop
                            }
                            i++
                        loop
                    }
                    checky++
                loop
                checkx++
            loop
        return count_can_put
        #deffunc PutDisk array field, var turn, int putx, int puty
            dim dx, 8 : dx = 0, 1, 1, 1, 0, -1, -1, -1
            dim dy, 8 : dy = -1, -1, 0, 1, 1, 1, 0, -1
            px = putx : py = puty
            if(field(px, py) == 2){
                i = 0
                repeat 8
                    j = 1
                    repeat 8
                        if(field(px + j * dx.i, py + j * dy.i) == turn){
                            k = 0
                            repeat j + 1
                                field(px + k * dx.i, py + k * dy.i) = turn
                                k++
                            loop
                            break
                        }else:if(field(px + j * dx.i, py + j * dy.i) == 2 || field(px + j * dx.i, py + j * dy.i) == 10 || field(px + j * dx.i, py + j * dy.i) == 0){
                            break
                        }
                        j++
                    loop
                    i++
                loop
            }
            i = 1
            repeat 8
                j = 1
                repeat 8
                    if(field.i.j == 2 || field.i.j == -2) : field.i.j = 0
                    j++
                loop
                i++
            loop
        return
#global
#module _NeuralNetwork_
    //関数定義
        #deffunc AssessmentBoard array field, var turn, array NNWeight, var putx, var puty
            dim BufferField, 10, 10
            score = -2147483647
            x = 1
            repeat 8
                y = 1
                repeat 8
                    i = 0
                    repeat 10
                        j = 0
                        repeat 10
                            BufferField.i.j = field.i.j
                            j++
                        loop
                        i++
                    loop
                    if(BufferField.x.y == 2){
                        PutDisk BufferField, turn, x, y
                        bufscore = NeuralNetwork(BufferField, NNWeight)
                        if(bufscore > score){
                            score = bufscore
                            putx = x
                            puty = y
                        }
                    }
                    y++
                loop
                x++
            loop
        return
        #defcfunc NeuralNetwork array field, array NNWeight
            dim InputLayer, 64
            dim MiddleLayer, 8
            dim OutputLayer, 1

            i = 0
            repeat 64
                InputLayer.i = field(i \ 8 + 1, i / 8 + 1)
                j = 0
                repeat 8
                    MiddleLayer(j) += NNWeight(i * 8 + j) * InputLayer(i)
                    j++
                loop
                i++
            loop

            i = 0
            repeat 8
                j = 0
                repeat 1
                    OutputLayer(j) += NNWeight(512 + i * 1 + j) * MiddleLayer(i)
                    j++
                loop
                i++
            loop
        return OutputLayer
#global
//画像を用意
    buffer 1, 100, 100
        color 0, 0, 0 : boxf
        color 0, 255, 0 : boxf 1, 1, 98, 98
    buffer 2, 100, 100
        color 0, 0, 0 : boxf
        color 0, 255, 0 : boxf 1, 1, 98, 98
        color 0, 0, 0 : circle 3, 3, 96, 96
    buffer 3, 100, 100
        color 0, 0, 0 : boxf
        color 0, 255, 0 : boxf 1, 1, 98, 98
        color 255, 255, 255 : circle 3, 3, 96, 96
    buffer 4, 100, 100
        color 0, 0, 0 : boxf
        color 0, 255, 0 : boxf 1, 1, 98, 98
        color 128, 128, 128 : circle 3, 3, 96, 96
    buffer 5, 100, 100
        color 0, 0, 0 : boxf
        color 255, 255, 0 : boxf 1, 1, 98, 98
    gsel 0

//変数の定義初期化
    dim field, 10, 10
    ClearField field

    turn = 1


    dim NNWeightBlack, 520
    dim NNWeightWhite, 520

    randomize
    i = 0
    repeat 520
        NNWeightBlack.i = rnd(101)
        NNWeightWhite.i = rnd(101)
        i++
    loop

    
//メイン
    screen 0, 100 * 8, 100 * 8
repeat
    ClearField field
    turn = 1

    i = 0
    repeat 520
        NNWeightBlack.i = rnd(101)
        NNWeightWhite.i = rnd(101)
        i++
    loop

    repeat
        i = 0
        repeat 2
            if(CheckCanPut(field, turn) != 0) : break
            turn *= -1
            i++
        loop
        if(i == 2) : DrawField field : break

        putx = 1 : puty = 1 : score = 0

        if(turn == 1) : AssessmentBoard field, turn, NNWeightBlack, putx, puty : else  : AssessmentBoard field, turn, NNWeightWhite, putx, puty

        PutDisk field, turn, putx, puty
        turn *= -1
        DrawField field
        await 5
    loop
    wait 
loop