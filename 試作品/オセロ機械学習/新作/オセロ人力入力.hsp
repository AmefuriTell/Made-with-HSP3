#module _othello_
    //関数定義
        #deffunc ClearField array field
            field.4.4 = 1
            field.5.5 = 1
            field.4.5 = -1
            field.5.4 = -1
            i = 0
            repeat 10
                field.i.0 = 10
                field.i.9 = 10
                field.0.i = 10
                field.9.i = 10
                i++
            loop
        return
        #deffunc DrawField array field//描画
            redraw 0
                i = 1
                repeat 8
                    j = 1
                    repeat 8
                        pos (i - 1) * 20, (j - 1) * 20
                        if(field.i.j == 0){
                            celput 1,, 1.0, 1.0
                        }else:if(field.i.j == 1){
                            celput 2,, 1.0, 1.0
                        }else:if(field.i.j == -1){
                            celput 3,, 1.0, 1.0
                        }else:if(field.i.j == 2 || field.i.j == -2){
                            celput 4,, 1.0, 1.0
                        }
                        j++
                    loop
                    i++
                loop
            redraw 1
        return
        #deffunc CheckCanPut array field, var turn, array dx, array dy, array count_put
            //各マスについてみる
            count_can_put = 0
            checkx = 1
            repeat 8
                checky = 1
                repeat 8
                    if(field.checkx.checky == 0 || field.checkx.checky == turn * 2){
                        i = 0
                        repeat 8
                            if(field(checkx + dx.i, checky + dy.i) == -turn){
                                j = 1
                                repeat
                                    switch field(checkx + dx(i) * j, checky + dy(i) * j)
                                        case turn
                                            field(checkx, checky) = 2
                                            count_can_put++;
                                        case 0
                                        case 10
                                        case 2
                                            break
                                        swbreak
                                    swend
                                    j++
                                loop
                            }
                            i++
                        loop
                    }
                    checky++
                loop
                checkx++
            loop
            if(turn == 1) : count_put.0 = count_can_put : else : can_count.1 = count_can_put
            if(count_can_put == 0):turn *= -1
        return
        #deffunc PutDisk array field, var turn, int putx, int puty, array dx, array dy
            px = putx : py = puty
            if(field(px, py) == 2){
                i = 0
                repeat 8
                    j = 1
                    repeat 8
                        if(field(px + j * dx.i, py + j * dy.i) == turn){
                            k = 0
                            repeat j + 1
                                field(px + k * dx.i, py + k * dy.i) = turn
                                k++
                            loop
                            break
                        }else:if(field(px + j * dx.i, py + j * dy.i) == 2 || field(px + j * dx.i, py + j * dy.i) == 10 || field(px + j * dx.i, py + j * dy.i) == 0){
                            break
                        }
                        j++
                    loop
                    i++
                loop
            }
            i = 1
            repeat 8
                j = 1
                repeat 8
                    if(field.i.j == 2 || field.i.j == -2) : field.i.j = 0
                    j++
                loop
                i++
            loop
        return
#global
//仮想画面を用意
    buffer 1, 20, 20
        color 0, 0, 0 : boxf
        color 0, 255, 0 : boxf 1, 1, 18, 18
    buffer 2, 20, 20
        color 0, 0, 0 : boxf
        color 0, 255, 0 : boxf 1, 1, 18, 18
        color 0, 0, 0 : circle 3, 3, 16, 16
    buffer 3, 20, 20
        color 0, 0, 0 : boxf
        color 0, 255, 0 : boxf 1, 1, 18, 18
        color 255, 255, 255 : circle 3, 3, 16, 16
    buffer 4, 20, 20
        color 0, 0, 0 : boxf
        color 0, 255, 0 : boxf 1, 1, 18, 18
        color 128, 128, 128 : circle 3, 3, 16, 16
    buffer 5, 20, 20
        color 0, 0, 0 : boxf
        color 255, 255, 0 : boxf 1, 1, 18, 18
    gsel 0

//変数の定義初期化
    dim field, 10, 10
    ClearField field

    turn = 1
    dim dx, 8 : dx = 0, 1, 1, 1, 0, -1, -1, -1
    dim dy, 8 : dy = -1, -1, 0, 1, 1, 1, 0, -1

    dim count_can_put, 2

    CheckCanPut field, turn, dx, dy, count_can_put
//メイン
    screen 0, 20 * 8, 20 * 8

    repeat
        serectx = mousex / 20 : serecty = mousey / 20
        stick key
        if(key == 256 && field(serectx + 1, serecty + 1) == 2){
            PutDisk field, turn, serectx + 1, serecty + 1, dx, dy
            turn *= -1
            CheckCanPut field, turn, dx, dy, count_can_put
            i = 0
            repeat 2
                if(count_can_put.i != 0):break
                i++
            loop
            if(i == 2){
                DrawField field
                break
            }
        }
        DrawField field
        
        if(field(serectx + 1, serecty + 1) == 0) : pos serectx * 20, serecty * 20 : celput 5,, 1.0, 1.0
        await 5
    loop
//